【ロジック】
プログラムにおける処理の内容・手順・方法のこと。
「どんなことをするのか」「どうやってするのか」の肝になる部分なので、とても大事。
ロジックの組み方によって、処理の速さや変更のしやすさが変わってくる。
ロジックを考える作業のことを詳細設計やプログラム設計などと呼ぶ。


【デバッグ】
不具合の原因（バグ）を探して直すこと。


【開発手法(ウォーターフォール開発・アジャイル開発)】
ウォーターフォール開発
システム開発の一つで、設計→プログラムを作る→テスト→完成　のように工程を完璧に一つずつ順番に終わらせていき、基本的には工程の後戻りをしないやりかた。
メリットはどこまで進んだかがわかりやすいので、管理がしやすい。
デメリットは要求される能力水準が高いこと。

アジャイル開発
システム開発の一つで、作る→見てもらう→作り直す…のように柔軟に進めるやりかた。
メリットは、できたものを実際に見てあれこれ判断できること、方向転換や軌道修正が比較的容易であること、上手くいけばコストを減らせることがある。
デメリットは工程数が見積もりにくい、うまくやらないと収拾がつかなくなる、人員の入れ替えが大変かもしれないということがある。


【アルゴリズム】
問題解決にいたる「やり方」や「考え方」のこと。
検索アルゴリズム→検索のやりかた
暗号化アルゴリズム→暗号化のやりかた
また、先人の知恵を指してアルゴリズムという場合もある。


【フローチャート図】
工程や手順の流れを図示する手法の一つで、個々の段階を箱で表し、それらを順序や論理の推移に従って矢印や線分で結んだもの。
目的はプログラム構造の整理・プログラミング速度を上げるため(効率化)・プログラム品質の向上である。
https://www.edrawsoft.com/jp/flowchart/images/five-basic-flowchart-shapes.png



【設計書(外部設計、内部設計)】
設計書…過程がかかれており、それを見れば作ることができる。技術的なことを知らないと作られない。

外部設計…基本設計(システムの概要とか基本的なことを考える工程)のこと。システム開発における工程の一つで、要件定義と詳細設計の中継ぎ的なポジションで行う設計のこと。
　　　　「何がやりたいのか」の認識を合わせた後は、「どんなシステムを作るか」を考える工程に入っていくこと。

内部設計…詳細設計(基本設計で考えた概要をもとにして、実際のプログラムが作れるまで細かく落とし込む工程)のこと。
　　　　　システム開発における工程の一つで、基本設計と実際のプログラムの中継ぎ的なポジションで行う設計のこと。


【要件定義(要求仕様書)】
要件定義…システム開発における工程の一つで、客様の「こういうものが欲しい」という工程をまとめること。

要求仕様書…エンドユーザーが「こんなふうに機能を修正したい」「新しく機能を追加いたい」といった要望に沿ってどのような対応するのか、どの程度の費用がかかるのか、開発期間はどのくらいか
　　　　　　データ連携有無や注意点がないかなどを記載するドキュメントのこと。
　　　　　　5W1H(WHY目的・HOW予算・WHERE、WHAT,WHO運用)を記載。


【システム開発におけるテスト(単体テスト、結合テスト、総合テスト)】
単体テスト…システム開発における工程の一つで、合体前の部品はきちんと動くかを確認するテストのこと。
　　　　　　Unit Test(ユニットテスト)の頭文字をとってUT、Program Test(プログラムテスト)Part Test(パートテスト)の頭文字をとってPTと表現される場合がある。

結合テスト…システム開発における工程の一つで、合体してきちんと動くか確認するテストのこと。
　　　　　　Integration Test(インテグレーションテスト)の頭文字をとってIT、Join Test(ジョインテスト)の頭文字をとってJTと表現される場合がある。 

総合テスト…システム開発における工程の一つで、「このシステムはばっちり、きっちり完成したか？きちんとお客様の役に立てるか」を全体的に確認するテストのこと。
　　　　　　System Test(システムテスト)の略でSTと表現される場合もある。
　　　　　　単体テスト・結合テストがあわった後に実践投入テスト(より実戦に近い目線で行う最終テスト)をすること。


【テスト仕様書(どのようなもの、項目)】
どんな条件の元でどんなテストをするのか洗い出してファイルや紙にしたもの。
「どんな条件の元で、どんなデータをいれると、どんな処理がされて、どんな結果になるはず。その結果から何が確認できる。」などを洗い出してまとめておく。


【バリデーション】
入力内容や記述内容が要件を満たしているか、妥当性を確認すること。
入力チェック→書式チェック(データの形式チェック)→妥当性の確認(例：入力フォームの電話番号のところにきちんと電話番号の書式になっているかチェックするのがバリエーション)



【ログ(意味、確認の仕方)】
コンピューターが何かを記録すること、あるいは記録したそれ自体のこと。
コンピューターの利用状況やデータ通信などの履歴や情報の記録をとること、またその記録を指す。
操作やデータの送受信が行われた日時と、行われた操作の内容や送受信されたデータの中身などが記録される。

確認方法
セキュリティ画面を表示→メニューエリアで「操作ログ」ー「操作ログ一覧」を選択


【FW(フレームワーク)】
システム開発をラクに行えるように用意されたプログラムやひな形(何らかの型や枠組み)のこと。
メリットとして、汎用的な機能があらかじめ用意されていること、複数人で開発する時にレベルを合わせやすい
(変数の名前はこんなルールでつける、設定値はこのファイルに書く、共通処理を書いたファイルはここにおきなさいといったルールがある)ことがある。
デメリットは、オリジナリティの高い処理を行おうとすると余計に大変、フレームワークを使わない場合に比べて、性能面で劣る(場合がある)。


【PHPのFWの種類と特徴】
PHPフレームワーク…PHPを使用してアプリケーションを開発する際の土台、雛形となるソフトウェアのこと。

Laravel
2011年に登場したPHPフレームワーク。簡単なアプリケーションを自動生成できる。たった数行のコードでTODOリストを作成できる。
コード自体もわかりやすく、習得するまでの時間があまりかからない。世界で一番人気のフレームワーク。

Cake PHP
2005年に登場したPHPフレームワーク。PHP開発者が誰でも素早く快適に開発ができるようにと生み出されたフレームワーク。
素早いだけあり、動作速度はLaravelよりも若干高速となっている。日本語に翻訳されたドキュメントが多いのとbake(ベイク)コマンドによるプログラム自動生成機能がある。
※bakeコマンド…質問のようなものを答えることで、テーブルの一覧、追加や削除といったPHPプログラムが自動生成される。

Phalcon
2012年に登場した最速のフレームワーク。C言語の拡張として書かれたPHP用オープンソースフルスタックフレームワーク。
C言語の拡張なので非常に高速で動作する。

CodeIgniter
2006年に登場したフレームワーク。コーディング規約の制限が比較的緩く、自由度が他のフレームワークに比べて高いのが特徴である。
コードも簡単で、軽量なWEBアプリケーション開発に向いている。

FuelPHP
2010年に登場したフレームワークで高速で軽量なオープンソースフレームワーク。シンプルでフレキシブルをテーマにしている小規模案件向けのフレームワークでもある。
オートローダー機能というものにより、必要なクラスだけを取り組む仕組みとなっている。

Yii
高性能、高速、軽量であり、大規模なWEBアプリケーション向けのコンポーネントベースのフレームワーク。
日本での利用は少ないが、世界のエンジニアの多くが利用しているPHPフレームワークである。軽量なキャッシュ機能があるので、アクセス負荷が大きいサービスの使用に適している。


【Ajax】
あるWEBページを表示した状態のまま、別ページや再読み込みなどを伴わずにWEBサーバ側と通信を行い、動的に表示内容を変更する手法。
ページ上でプログラムを実行できるプログラミング用語JavaScriptの拡張機能を用いる。


【API】
その機能と関係ないプログラム等から、その機能を利用できるように用意された、その機能との窓口部分(に関する決まりごと)のこと。
Application Programing Interface(アプリケーション・プログラミング・インターフェイス)の略。
「アプリケーション。ソフトウェア」を何かと何かで繋ぐものという意味。


【LAMP】
Linux + Apache + MySQL(MariaDB) + PHP(Perl、Python)で構成される環境のこと。
動的なWEBサイトやWEBサービスなどの構築に適しており、関連情報や事例も豊富である。



【クラウドサーバー、レンタルサーバー、VPSの違い】
クラウドサーバー
複数の仮想サーバーを個別で利用する。
クラウド上にあるサーバーを利用する形式。インターネットを経由して、クラウド上に存在するサーバーにアクセスする。
データのアップロードやダウンロードもインターネット環境さえあれば可能なため、使い勝手に優れた形式といえる。
もっとも自由度が高く、大規模の運用も視野に入れたサービス向け。リソースの変更を柔軟に行えるのが特徴。

レンタルサーバー
1つの物理サーバーを複数ユーザーで共用する。
本来、WEBサイトやECサイトを構築・運営するには、物理サーバや回線を用意しないといけない。そうなると、高度の知識や費用が必要となる。
そこでレンタルサーバーを利用すれば、それらの設備の管理をベンダーに一任した上でサイトを運営できる。
低コストで小規模の運用向け。他のユーザーの影響を受けやすいため、自由度が低い。

VPS
1つの仮想サーバー群を個別で利用する。
Virtual Private Serverの略で、日本語に訳すと「仮想専用サーバー」という意味。
サーバーに複数の仮想サーバーを構築し、その一つ一つをユーザーに貸し出す形式。
中規模の運用向け。自由度が低い反面、設定も自力で行う必要があり、専門知識を必要とする。


【AWS】
Amazon Web Service(アマゾンウェブサービス)のこと。Amazonが運営している、サーバーやデータベースを経由して使えるサーバやデータベースなどを貸してくれるサービスのこと。


【プラットフォーム】
動かすために必要な土台となる環境。
ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス、あるいはそれらの組み合わせ(動作環境)のこと。


【カバレッジ】
モノや範囲に対して全体のうちどれくらいをカバーしているのかを表すための指標のこと。日本語で網羅率と言われたりする。
「どこまで電波が届くか」「どこまで○○を適用するのか」といった話で出てくる。


【エビデンス】
何かの証拠となるもののこと。「きちんとテストした」という証拠となるであろう画面のハードコピー(画面の表示内容を保存したもの)やログ(何らかの記録)のこと。


【コンパイル】
人間がわかる言葉で書いたプログラムのソースコードの中身をコンピュータがわかる言葉に翻訳すること。
プログラムを作る一般的な流れは、人間語でプログラムの元ネタを書く → 元ネタを人間語から機械語に翻訳する(バイナリコード) →　翻訳された指示に従ってコンピュータが仕事するという流れ。
しかし、処理をするコンピュータは人間語がわからないので、コンピューターがわかるように変換する必要がある。その作業をコンパイルという。


【バッチ処理】
どこかのタイミングでまとめて実施される処理のこと。
メリットは自動化できること、忙しくない時に実行できること。報告書のデータを集計したり、バックアップをとったりする時にバッチ処理化することが多い。


【デプロイ(意味と方法、FTPソフトの種類)】
作ったプログラムを然るべき場所に置いたり、いろいろな設定をしたりして使える状態にすること。システムを利用可能な状態にすること。
《方法》
ブルーグリーンデプロイトメント
ブルーとグリーンの二つの環境を用意しておき、現在の本番環境をブルーで動かしたまま、新環境にグリーンにデプロイする。そして無事にデプロイが完了したら、
グリーンにスイッチのように切り替えることで。旧環境から新環境へアップデートさせる。
新環境で問題が起こったときは、再びブルー環境に置き換えることで簡単にロールバック(前の状態に戻すこと)ができる。こうすることでダウンタイムをほぼ発生させることなく環境の切り替えが可能となる。
グリーン環境は次回のデプロイまで維持する必要があるため、運用コストが発生する。

イミュータブルデプロイトメント
新環境への切り替え後、問題ないことを確認したら旧環境は破棄する。デプロイのたびに新しい環境を作っては捨てるということを行う。
ブルーグリーンデプロイトメントと違い、イミュータブルデプロイトメントは旧環境の運用コストは生じない。

シンボリックデプロイメント
運用中のサーバー上の別の場所に新しいファイルを配置して、サービスが利用しているシンボリックリンクを変更することで新しいアプリケーションに切り替える。
サーバーを増やす必要もなく、低コストでデプロイを自動化できるが、ファイルによっては再起動が必要となる場合がある。

ローリングデプロイメント
複数あるサーバーに対して順番にロードバランサーから切り離してデプロイを行なっていく手法。
一時的に新旧環境が混在することになるので注意が必要。

《FTPソフトの種類》※全て代表的無料FTPソフト
FileZilla
高速＋ハイスペック＋FTPS/SFTP対応。転送スピードがとても速く、比較的容量の大きいファイルでもエラーがでることがない。
セキュリティ面も充実していて、複数起動もできる。

Cyberduck
WindowsでもMacOSでも作動する。またドラッグ＆ドロップでファイル転送ができる。
日本語にも対応しているインターフェイスは初心者でも使いやすく、Amazonなどのクラウドサービスにも対応している。
FileZillaほど機能が多くない。

WinSCP
FileZillaとCyberduckの中間的なFTPアプリでWindowsで作動する。
オープンソースで開発・公開されており、ファイルを暗号化しコンピューター間でファイル転送するアプリケーションなので、セキュリティ面で安心できる。
自分のPCとサーバーとの間でファイル転送が簡単なデュアルペインビューが使用可能で、コーディング作業に便利なテキストエディタも便利。


【データベース接続クライアント(説明、代表的なもの)】
データベース管理システム(DBMS)や関係データベース管理システム(RDBMS)上のデータを容易に扱うためのソフトウェアである。
《代表的なもの》
SI Object Browser
DBeaver
RazorSQL
TablePuls


【Gitホスティングサービス(説明、代表的なもの)】
Gitによるクラウドベースのバージョン管理サービスのこと。
開発にあたり、複数人で作業するときに利用する。プロジェクトの全ファイルを管理してくれる。ツールを利用することで変更履歴を保存したり、以前のバージョンに戻すことも可能。
《代表的なもの》
GitHub
GitLab
BitBucket
Assembla
Phabricator


【チケット管理ツール(説明、代表的なもの)】
複数人の共同作における進捗管理や情報共有などができるシステムで、基本的な管理や操作はWebブラウザを通じて行うことができる。
《代表的なもの》
Wrike(ディレクターやデザイナー向け)
Redmine(エンジニア向け、無料なのでサーバの用意は自分でしないとダメ)
Backlog(純国産のチケットツール。上記2つのちょうど中間のもの)
Group　Task
Trello


【DBのJOINとは】
複数のテーブルを合体させて1つのテーブルっぽくすること。合体させることを「結合」という。
＊内部結合
＊外部結合
＊LEFT　OUTER JOINでの外部結合
＊RIGHT OUTER JOINでの外部結合


【SEO】
Search Engine Optimizationの略。
「検索エンジン最適化」といわれる。
内部施策(ホームページの中身をよくすること)や外部施策(良い評価を得る為の外堀を埋めていくこと：有名なホームページにリンクはってもらったりする)のどちらかに分類される。


【オブジェクト指向】

システムの構築や設計で、システムの構造を処理やその処理の対象となるもの(オブジェクト)同士のやり取りの関係として捉える考え方。
「モノ(どんな奴でどう動く)」に注目した考え方のこと。
Object-oriented(オブジェクト・オリエンティッド)の省略でOOと表現されることもある。



